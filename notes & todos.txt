Version 1.1
-----------  
- VS2010 parser
- Auto-detect VS version from the .sln file  
- Ability to add or suppress compiler flags
- Projects with property sheets, and inherited properties
- Make path to cygwin configurable for the tester
- Output target names might not be the same as project names.
- 32-bit vs 64-bit generation?
- Config option to suppress checking in current folder for dlls. 


Version 1.2
-----------
- Custom build steps
- Pre / post build steps
- Allow change to folder prefix "gcc" (maybe v 1.2) 


Version 2.0
-----------
- C# / mono


WIKI
----
- Notes on #ifdef stuff for dlls
- Notes on the code
  - Notes on cygwin install for testings


QUESTIONS
---------
  

BUGS
----
- OnDemandPriceLogger: fails with 'Value cannot be null'


C# / Mono
---------
Things we need for C# makefiles:
Y - List of .cs files
- List of references
  - List of library paths (do we need these if we have complete paths to references?)
  - Note: they may be different for Release and Debug configurations
Y - Debug and release flags
Y   - Debug_FLAGS = -warn:4 -warnaserror+ -nowarn:1701,1702 -debug+ -debug:full -filealign:512 -pkg:dotnet -define:DEBUG -define:TRACE -optimize-   
Y   - Release_FLAGS = -warn:4 -warnaserror+ -nowarn:1701,1702 -filealign:512 -pkg:dotnet -define:TRACE -optimize+ 
Y  - Parse project for:
Y    - Warning level
Y    - Ignore warnings
Y    - Treat warnings as errors
Y    - Defines(?)
Y - Output path
Y - Project type (library, exe, winexe)    

- Properties

  Name								Value
  ----                              -----
Y  "Optimize"						true/false
Y  "OutputPath"						"bin\Debug"
Y  "TreatWarningsAsErrors"			true/false
Y  "DefineConstants"					"DEBUG;TRACE"
Y  "DebugSymbols"					true/false
Y  "NoWarn"							"" (format?)
Y  "DebugInfo"						"full"
Y  "FileAlignment"					512
Y  "WarningLevel"					4
  
For references:
- Description = System.dll (not for assemblies in solution, at least not for mine)
- Path = full path
  - Seems to be just one of the configurations. Not sure how it chooses which one, 
    as it's at project level rather than at configuration level.
- CopyLocal: true/false
  - If we copy a referenced assembly, we need to copy all the assemblies that it needs as well
    (If they are references to assemblies in the solution, we should know from that project 
    which references they need.)
 
- We don't need to include the standard .NET references, as we're using -pkg:dotnet
  (which is good, as it's not entirely clear to me where they are in mono.)
  - So we should deliberately exclude them.
    - Can this just be by name, e.g. System.dll or is it possible to
      have your own System.dll in a project (try this).
  
- Can we work out which references are to projects in the solution?
  - We should be able to as we have the path, and we know the output 
    paths of the other projects.
    - Though we only know this after we have parsed them all.
      So maybe this needs to be a step after the first pass of parsing,
      rather like the implicit linking.
      
- Is there any harm in always doing copy-local?
  - I suppose it might be bad if someone did not explicitly want it.
  - The copy step should be done before the build step.
  - The good thing about doing this is that it makes the library paths
    easier, as we know that they are just in our output folder.
    
From TextLib
------------
C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.dll, 
C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\System.Core.dll, 
C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\System.Xml.Linq.dll, 
C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\System.Data.DataSetExtensions.dll, 
C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.Data.dll, 
C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.Xml.dll, 
C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll, 

From App
--------
C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.dll, 
C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\System.Core.dll, 
C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\System.Xml.Linq.dll, 
C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\System.Data.DataSetExtensions.dll, 
C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.Data.dll, 
C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.Xml.dll, 
D:\code\make-it-so\Tests\Runtime\TestProjects\VS2008\C#\HelloWorldWithLibrary\TextLib\bin\Debug\TextLib.dll, 
C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll, 
    
   
